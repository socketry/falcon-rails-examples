// @socketry/live@0.16.1 downloaded from https://ga.jspm.io/npm:@socketry/live@0.16.1/Live.js

import e from"morphdom";class ViewElement extends HTMLElement{static observedAttributes=[];static connectedElements=new Set;connectedCallback(){this.id||(this.id=crypto.randomUUID());ViewElement.connectedElements.add(this);const e=this.ownerDocument.defaultView;e&&e.live&&e.live.bind(this)}disconnectedCallback(){ViewElement.connectedElements.delete(this);const e=this.ownerDocument.defaultView;e&&e.live&&e.live.unbind(this)}}class Live{#e;#t;#i;#n;#s;#r;static start(e={}){let t=e.window||globalThis;if(t.live)throw new Error("Live.js is already started!");let i=e.path||"live";let n=e.base||t.location.href;let s=new URL(i,n);s.protocol=s.protocol.replace("http","ws");t.live=new this(t,s);t.customElements.get("live-view")||t.customElements.define("live-view",ViewElement);return t.live}constructor(e,t){this.#e=e;this.#t=e.document;this.url=t;this.#i=null;this.#n=[];this.#s=0;this.#r=null;this.#t.addEventListener("visibilitychange",(()=>this.#l()));this.#l()}connect(){if(this.#i)return this.#i;let e=this.#i=new this.#e.WebSocket(this.url);if(this.#r){clearTimeout(this.#r);this.#r=null}e.onopen=()=>{this.#s=0;this.#c();this.#o()};e.onmessage=e=>{const[t,...i]=JSON.parse(e.data);this[t](...i)};e.addEventListener("error",(()=>{this.#s+=1}));e.addEventListener("close",(()=>{if(this.#i&&!this.#r){const e=Math.min(100*this.#s**2,6e4);this.#r=setTimeout((()=>{this.#r=null;this.connect()}),e)}this.#i===e&&(this.#i=null)}));return e}disconnect(){if(this.#i){const e=this.#i;this.#i=null;e.close()}if(this.#r){clearTimeout(this.#r);this.#r=null}}#h(e){if(this.#i)try{return this.#i.send(e)}catch(e){}this.#n.push(e)}#c(){if(this.#n.length===0)return;let e=this.#n;this.#n=[];for(var t of e)this.#h(t)}#l(){this.#t.hidden?this.disconnect():this.connect()}bind(e){this.#h(JSON.stringify(["bind",e.id,e.dataset]))}unbind(e){this.#i&&this.#h(JSON.stringify(["unbind",e.id]))}#o(){for(let e of ViewElement.connectedElements)this.bind(e)}#a(e){return this.#t.createRange().createContextualFragment(e)}#d(e,...t){e?.reply&&this.#h(JSON.stringify(["reply",e.reply,...t]))}script(e,t,i){let n=this.#t.getElementById(e);try{let e=this.#e.Function(t).call(n);this.#d(i,e)}catch(e){this.#d(i,null,{name:e.name,message:e.message,stack:e.stack})}}update(t,i,n){let s=this.#t.getElementById(t);let r=this.#a(i);e(s,r);this.#d(n)}replace(t,i,n){let s=this.#t.querySelectorAll(t);let r=this.#a(i);s.forEach((t=>e(t,r.cloneNode(true))));this.#d(n)}prepend(e,t,i){let n=this.#t.querySelectorAll(e);let s=this.#a(t);n.forEach((e=>e.prepend(s.cloneNode(true))));this.#d(i)}append(e,t,i){let n=this.#t.querySelectorAll(e);let s=this.#a(t);n.forEach((e=>e.append(s.cloneNode(true))));this.#d(i)}remove(e,t){let i=this.#t.querySelectorAll(e);i.forEach((e=>e.remove()));this.#d(t)}dispatchEvent(e,t,i){let n=this.#t.querySelectorAll(e);n.forEach((e=>e.dispatchEvent(new this.#e.CustomEvent(t,i))));this.#d(i)}error(e){console.error("Live.error",...arguments)}forward(e,t){this.connect();this.#h(JSON.stringify(["event",e,t]))}forwardEvent(e,t,i,n=false){n&&t.preventDefault();this.forward(e,{type:t.type,detail:i})}forwardFormEvent(e,t,i,n=true){n&&t.preventDefault();let s=t.form;let r=new FormData(s);this.forward(e,{type:t.type,detail:i,formData:[...r]})}}export{Live,ViewElement};

